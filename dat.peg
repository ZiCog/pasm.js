/*
 * dat-grammar.pegjs 
 *
 *   peg.js grammar specification for pasm.js.
 *   That is to say the DAT sections of Spin source files.
 *
 */

program
  = lines

lines
  = line*

line
  = nonBlankLine
  / blankLine

nonBlankLine
  = white* s:pasmStatement white* "\n"?
    {
      return s;
    }
  / "DAT"i white* "\n"?
    {
      return {dat_block: true}
    }
  
blankLine
  = white* "\n"
    {
      return {blankLine: true};
    }
  / white+
    {
      return {blankLine: true};
    }
  / white* "'" c:[a-zA-Z0-9/ ']*  "\n"
    {
      return {comment: c.join("")};
    }

pasmStatement
  = l:label white c:condition white i:instruction
    {
      i.label = l;
      i.condition = c;
      return {instruction:i};
    }
  / l:label white i:instruction
    {
      i.label = l;
      return {instruction:i};
    }
  / c:condition white i:instruction
    {
      i.condition = c;
      return {instruction:i};
    }
  / i:instruction
    {
      return {instruction:i}
    }
  / o:org
  / f:fit
  / l:label
    {
      return {instruction: {label: l}};
    }
  
fit
  = "fit"i white e:constantExpression
    {
      return {fit: e}
    }
    / "fit"i
    {
      return {fit: 496}
    }

org
  = "org"i white e:constantExpression
    {
      return {org: e}
    }
    / "org"i
    {
      return {org: 0}
    }

label
  = l0:[a-zA-Z_] l:[a-zA-Z0-9_]* 
    !{
      return isKeyword(l0 + l.join(""));
    }
    {
      return l0 + l.join("");
    }

instruction
  = o:op0 e:effectList
    {
      return {operation:o, dest:null, src:null, effects:e}
    }
  / o:op1 white s:src e:effectList 
    {
      return {operation:o, dest:null, src:s, effects:e}
    }
  / o:op2 white? d:dest white? "," white? s:src e:effectList
    {
      return {operation:o, dest:d, src:s, effects:e}
    }

src
  = l:literal [ ]* a:constantExpression
    {
      return {literal:l, value: a};
    }

literal
  = l:"#"?
    {
      return l === null ? false : true;
    }

dest
  = constantExpression

effectList
  = e:effect o:nextEffect+
  {
    o.push(e);
    return o;
  }
  / e:effect?
  {
    return [e];
  }

nextEffect
  = white* "," white* e:effect
    {
      return e
    }

white
  = [ ]+
    {
      return "WHITESPACE"
    }

constantExpression
  = level11 

level11
  = l:level10 o:"OR"i  r:level11
    {
      return {operator:o, left:l, right:r}
    }
  / level10

level10
  = l:level9 o:"AND"i r:level10
    {
      return {operator:o, left:l, right:r}
    }
  / level9

level9
  /* TODO: */
  = level8

level8
  = l:level7 o:("<" / ">" / "<>" / "==" / "=<" / ">=") r:level8
    {
      return {operator:o, left:l, right:r}
    }
  / level7

level7
  = l:level6 o:("#>" / "<#") r:level7
    {
      return {operator:o, left:l, right:r}
    }
  / level6

level6
  = l:level5 o:[+-]  r:level6
    {
      return {operator:o, left:l, right:r}
    }
  / level5

level5
  = l:level4 o:[*/] r:level5
    {
      return {operator:o, left:l, right:r}
    }
  / level4

level4
  = l:level3 o:[|^] r:level4
    {
      return {operator:o, left:l, right:r}
    }
  / level3

level3
  = l:level2 o:"&" r:level3
    {
      return {operator:o, left:l, right:r}
    }
  / level2

level2
  = l:primary o:("->" / "<-" / ">>" / "<<" / "~>" / "><") r:level2
    {
      return {operator:o, left:l, right:r}
    }
  / primary

primary
  = [ ]* i:number [ ]*
    {
      return i;
    }
  / [ ]* "(" e:level11  ")" [ ]* 
    {
      return e;
    }

number
  = quaternaryNumber
  / binaryNumber
  / hexNumber
  / decimalNumber
  / symbol

binaryNumber
  = "%" d:[0-1]+
    {
      return parseInt(d.join(""), 2);
    }

quaternaryNumber
  = "%%" d:[0-3]+
    {
      return parseInt(d.join(""), 4);
    }

decimalNumber
  = d:[0-9]+
    {
      return parseInt(d.join(""), 10);
    }

hexNumber
  = "$" d:[0-9a-fA-F]+
    {
      return parseInt(d.join(""), 16);
    }

symbol
  = first:[a-zA-Z_] rest:[a-zA-Z_0-9]*
    !{
      return isKeyword(first + rest.join(""));
    }
    {
      return first + rest.join("");
    }

predefined
  = "TRUE"i
  / "FALSE"i
  / "POSX"i
  / "NEGX"i
  / "PI"i
  / "DIRA"i
  / "DIRB"i
  / "INA"i
  / "INB"i
  / "OUTA"i
  / "OUTB"i
  / "CNT"i
  / "CTRA"i
  / "CTRB"i
  / "FRQA"i
  / "FRQB"i
  / "PHSA"i
  / "PHSB"i
  / "VCFG"i
  / "VSCL"i
  / "PAR"i

effect
  = "NR"i
  / "WR"i
  / "WC"i
  / "WZ"i

condition
  = "IF_ALWAYS"i
  / "IF_NEVER"i
  / "IF_E"i
  / "IF_NE"i
  / "IF_A"i
  / "IF_B"i
  / "IF_AE"i
  / "IF_BE"i
  / "IF_C"i
  / "IF_NC"i
  / "IF_Z"i
  / "IF_NZ"i
  / "IF_C_EQ_Z"i
  / "IF_C_NE_Z"i
  / "IF_C_AND_Z"i
  / "IF_C_AND_NZ"i
  / "IF_NC_AND_Z"i
  / "IF_NC_AND_NZ"i
  / "IF_C_OR_Z"i
  / "IF_C_OR_NZ"i
  / "IF_NC_OR_Z"i
  / "IF_NC_OR_NZ"i
  / "IF_Z_EQ_C"i
  / "IF_Z_NE_C"i
  / "IF_Z_AND_C"i
  / "IF_Z_AND_NC"i
  / "IF_NZ_AND_C"i
  / "IF_NZ_AND_NC"i
  / "IF_Z_OR_C"i
  / "IF_Z_OR_NC"i
  / "IF_NZ_OR_C"i
  / "IF_NZ_OR_NC"i

op0
  = "NOP"i
  / "RET"i

op1
  = "CALL"i
  / "JMP"i

op2
  = "JMPRET"i
  / "TJNZ"i
  / "TJZ"i
  / "DJNZ"i
  / "RDBYTE"i
  / "RDWORD"i
  / "RDLONG"i
  / "WRBYTE"i
  / "WRWORD"i
  / "WRLONG"i
  / "ABS"i
  / "ABSNEG"i
  / "NEG"i
  / "NEGC"i
  / "NEGNC"i
  / "NEGZ"i
  / "NEGNZ"i
  / "MIN"i
  / "MINS"i
  / "MAX"i
  / "MAXS"i
  / "ADD"i
  / "ADDABS"i
  / "ADDS"i
  / "ADDX"i
  / "ADDSX"i
  / "SUB"i
  / "SUBABS"i
  / "SUBS"i
  / "SUBX"i
  / "SUBSX"i
  / "SUMC"i
  / "SUMNC"i
  / "SUMZ"i
  / "SUMNZ"i
  / "MUL"i
  / "MULS"i
  / "AND"i
  / "ANDN"i
  / "OR"i
  / "XOR"i
  / "ONES"i
  / "ENC"i
  / "RCL"i
  / "RCR"i
  / "REV"i
  / "ROL"i
  / "ROR"i
  / "SHL"i
  / "SHR"i
  / "SAR"i
  / "CMP"i
  / "CMPS"i
  / "CMPX"i
  / "CMPSX"i
  / "CMPSUB"i
  / "TEST"i
  / "TESTN"i
  / "MOV"i
  / "MOVS"i
  / "MOVD"i
  / "MOVI"i
  / "MUXC"i
  / "MUXNC"i
  / "MUXZ"i
  / "MUXNZ"i
  / "HUBOP"i
  / "CLKSET"i
  / "COGID"i
  / "COGINIT"i
  / "COGSTOP"i
  / "LOCKNEW"i
  / "LOCKRET"i
  / "LOCKCLR"i
  / "LOCKSET"i
  / "WAITCNT"i
  / "WAITPEQ"i
  / "WAITPNE"i
  / "WAITVID"i
