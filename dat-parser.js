module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = peg$FAILED,
        peg$c2 = null,
        peg$c3 = "\n",
        peg$c4 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c5 = function(s) {
              return s;
            },
        peg$c6 = "dat",
        peg$c7 = { type: "literal", value: "DAT", description: "\"DAT\"" },
        peg$c8 = function() {
              return {dat_block: true}
            },
        peg$c9 = function() {
              return {bankLine: true};
            },
        peg$c10 = "'",
        peg$c11 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c12 = /^[a-zA-Z0-9\/ ']/,
        peg$c13 = { type: "class", value: "[a-zA-Z0-9\\/ ']", description: "[a-zA-Z0-9\\/ ']" },
        peg$c14 = function(c) {
              return {comment: c.join("")};
            },
        peg$c15 = function(l, c, i) {
              i.label = l;
              i.condition = c;
              return {instruction:i};
            },
        peg$c16 = function(l, i) {
              i.label = l;
              return {instruction:i};
            },
        peg$c17 = function(c, i) {
              i.condition = c;
              return {instruction:i};
            },
        peg$c18 = function(i) {
              return {instruction:i}
            },
        peg$c19 = function(l) {
              return {instruction: {label: l}};
            },
        peg$c20 = "fit",
        peg$c21 = { type: "literal", value: "fit", description: "\"fit\"" },
        peg$c22 = function(e) {
              return {fit: e}
            },
        peg$c23 = function() {
              return {fit: 496}
            },
        peg$c24 = "org",
        peg$c25 = { type: "literal", value: "org", description: "\"org\"" },
        peg$c26 = function(e) {
              return {org: e}
            },
        peg$c27 = function() {
              return {org: 0}
            },
        peg$c28 = /^[a-zA-Z_]/,
        peg$c29 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
        peg$c30 = /^[a-zA-Z0-9_]/,
        peg$c31 = { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
        peg$c32 = function(l0, l) {
              return isKeyword(l0 + l.join(""));
            },
        peg$c33 = void 0,
        peg$c34 = function(l0, l) {
              return l0 + l.join("");
            },
        peg$c35 = function(o, e) {
              return {operation:o, dest:null, src:null, effects:e}
            },
        peg$c36 = function(o, s, e) {
              return {operation:o, dest:null, src:s, efects:e}
            },
        peg$c37 = ",",
        peg$c38 = { type: "literal", value: ",", description: "\",\"" },
        peg$c39 = function(o, d, s, e) {
              return {operation:o, dest:d, src:s, efects:e}
            },
        peg$c40 = /^[ ]/,
        peg$c41 = { type: "class", value: "[ ]", description: "[ ]" },
        peg$c42 = function(l, a) {
              return {literal:l, value: a};
            },
        peg$c43 = "#",
        peg$c44 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c45 = function(l) {
              return l === null ? false : true;
            },
        peg$c46 = function(e) {
              return e
            },
        peg$c47 = function() {
              return "WHITESPACE"
            },
        peg$c48 = "or",
        peg$c49 = { type: "literal", value: "OR", description: "\"OR\"" },
        peg$c50 = function(l, o, r) {
              return {operator:o, left:l, right:r}
            },
        peg$c51 = "and",
        peg$c52 = { type: "literal", value: "AND", description: "\"AND\"" },
        peg$c53 = "<",
        peg$c54 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c55 = ">",
        peg$c56 = { type: "literal", value: ">", description: "\">\"" },
        peg$c57 = "<>",
        peg$c58 = { type: "literal", value: "<>", description: "\"<>\"" },
        peg$c59 = "==",
        peg$c60 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c61 = "=<",
        peg$c62 = { type: "literal", value: "=<", description: "\"=<\"" },
        peg$c63 = "#>",
        peg$c64 = { type: "literal", value: "#>", description: "\"#>\"" },
        peg$c65 = "<#",
        peg$c66 = { type: "literal", value: "<#", description: "\"<#\"" },
        peg$c67 = /^[+\-]/,
        peg$c68 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
        peg$c69 = /^[*\/]/,
        peg$c70 = { type: "class", value: "[*\\/]", description: "[*\\/]" },
        peg$c71 = /^[|\^]/,
        peg$c72 = { type: "class", value: "[|\\^]", description: "[|\\^]" },
        peg$c73 = "&",
        peg$c74 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c75 = "->",
        peg$c76 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c77 = "<-",
        peg$c78 = { type: "literal", value: "<-", description: "\"<-\"" },
        peg$c79 = ">>",
        peg$c80 = { type: "literal", value: ">>", description: "\">>\"" },
        peg$c81 = "<<",
        peg$c82 = { type: "literal", value: "<<", description: "\"<<\"" },
        peg$c83 = "~>",
        peg$c84 = { type: "literal", value: "~>", description: "\"~>\"" },
        peg$c85 = "><",
        peg$c86 = { type: "literal", value: "><", description: "\"><\"" },
        peg$c87 = function(i) {
              return i;
            },
        peg$c88 = "(",
        peg$c89 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c90 = ")",
        peg$c91 = { type: "literal", value: ")", description: "\")\"" },
        peg$c92 = function() {
                return false;
            },
        peg$c93 = function(e) {
              return e;
            },
        peg$c94 = "%",
        peg$c95 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c96 = /^[0-1]/,
        peg$c97 = { type: "class", value: "[0-1]", description: "[0-1]" },
        peg$c98 = function(d) {
              return parseInt(d.join(""), 2);
            },
        peg$c99 = "%%",
        peg$c100 = { type: "literal", value: "%%", description: "\"%%\"" },
        peg$c101 = /^[0-3]/,
        peg$c102 = { type: "class", value: "[0-3]", description: "[0-3]" },
        peg$c103 = function(d) {
              return parseInt(d.join(""), 4);
            },
        peg$c104 = /^[0-9]/,
        peg$c105 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c106 = function(d) {
              return parseInt(d.join(""), 10);
            },
        peg$c107 = "$",
        peg$c108 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c109 = /^[0-9a-fA-F]/,
        peg$c110 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c111 = function(d) {
              return parseInt(d.join(""), 16);
            },
        peg$c112 = /^[a-zA-Z_0-9]/,
        peg$c113 = { type: "class", value: "[a-zA-Z_0-9]", description: "[a-zA-Z_0-9]" },
        peg$c114 = function(first, rest) {
              return isKeyword(first + rest.join(""));
            },
        peg$c115 = function(first, rest) {
              return first + rest.join("");
            },
        peg$c116 = "true",
        peg$c117 = { type: "literal", value: "TRUE", description: "\"TRUE\"" },
        peg$c118 = "false",
        peg$c119 = { type: "literal", value: "FALSE", description: "\"FALSE\"" },
        peg$c120 = "posx",
        peg$c121 = { type: "literal", value: "POSX", description: "\"POSX\"" },
        peg$c122 = "negx",
        peg$c123 = { type: "literal", value: "NEGX", description: "\"NEGX\"" },
        peg$c124 = "pi",
        peg$c125 = { type: "literal", value: "PI", description: "\"PI\"" },
        peg$c126 = "dira",
        peg$c127 = { type: "literal", value: "DIRA", description: "\"DIRA\"" },
        peg$c128 = "dirb",
        peg$c129 = { type: "literal", value: "DIRB", description: "\"DIRB\"" },
        peg$c130 = "ina",
        peg$c131 = { type: "literal", value: "INA", description: "\"INA\"" },
        peg$c132 = "inb",
        peg$c133 = { type: "literal", value: "INB", description: "\"INB\"" },
        peg$c134 = "outa",
        peg$c135 = { type: "literal", value: "OUTA", description: "\"OUTA\"" },
        peg$c136 = "outb",
        peg$c137 = { type: "literal", value: "OUTB", description: "\"OUTB\"" },
        peg$c138 = "cnt",
        peg$c139 = { type: "literal", value: "CNT", description: "\"CNT\"" },
        peg$c140 = "ctra",
        peg$c141 = { type: "literal", value: "CTRA", description: "\"CTRA\"" },
        peg$c142 = "ctrb",
        peg$c143 = { type: "literal", value: "CTRB", description: "\"CTRB\"" },
        peg$c144 = "frqa",
        peg$c145 = { type: "literal", value: "FRQA", description: "\"FRQA\"" },
        peg$c146 = "frqb",
        peg$c147 = { type: "literal", value: "FRQB", description: "\"FRQB\"" },
        peg$c148 = "phsa",
        peg$c149 = { type: "literal", value: "PHSA", description: "\"PHSA\"" },
        peg$c150 = "phsb",
        peg$c151 = { type: "literal", value: "PHSB", description: "\"PHSB\"" },
        peg$c152 = "vcfg",
        peg$c153 = { type: "literal", value: "VCFG", description: "\"VCFG\"" },
        peg$c154 = "vscl",
        peg$c155 = { type: "literal", value: "VSCL", description: "\"VSCL\"" },
        peg$c156 = "par",
        peg$c157 = { type: "literal", value: "PAR", description: "\"PAR\"" },
        peg$c158 = "nr",
        peg$c159 = { type: "literal", value: "NR", description: "\"NR\"" },
        peg$c160 = "wr",
        peg$c161 = { type: "literal", value: "WR", description: "\"WR\"" },
        peg$c162 = "wc",
        peg$c163 = { type: "literal", value: "WC", description: "\"WC\"" },
        peg$c164 = "wz",
        peg$c165 = { type: "literal", value: "WZ", description: "\"WZ\"" },
        peg$c166 = "if_always",
        peg$c167 = { type: "literal", value: "IF_ALWAYS", description: "\"IF_ALWAYS\"" },
        peg$c168 = "if_never",
        peg$c169 = { type: "literal", value: "IF_NEVER", description: "\"IF_NEVER\"" },
        peg$c170 = "if_e",
        peg$c171 = { type: "literal", value: "IF_E", description: "\"IF_E\"" },
        peg$c172 = "if_ne",
        peg$c173 = { type: "literal", value: "IF_NE", description: "\"IF_NE\"" },
        peg$c174 = "if_a",
        peg$c175 = { type: "literal", value: "IF_A", description: "\"IF_A\"" },
        peg$c176 = "if_b",
        peg$c177 = { type: "literal", value: "IF_B", description: "\"IF_B\"" },
        peg$c178 = "if_ae",
        peg$c179 = { type: "literal", value: "IF_AE", description: "\"IF_AE\"" },
        peg$c180 = "if_be",
        peg$c181 = { type: "literal", value: "IF_BE", description: "\"IF_BE\"" },
        peg$c182 = "if_c",
        peg$c183 = { type: "literal", value: "IF_C", description: "\"IF_C\"" },
        peg$c184 = "if_nc",
        peg$c185 = { type: "literal", value: "IF_NC", description: "\"IF_NC\"" },
        peg$c186 = "if_z",
        peg$c187 = { type: "literal", value: "IF_Z", description: "\"IF_Z\"" },
        peg$c188 = "if_nz",
        peg$c189 = { type: "literal", value: "IF_NZ", description: "\"IF_NZ\"" },
        peg$c190 = "if_c_eq_z",
        peg$c191 = { type: "literal", value: "IF_C_EQ_Z", description: "\"IF_C_EQ_Z\"" },
        peg$c192 = "if_c_ne_z",
        peg$c193 = { type: "literal", value: "IF_C_NE_Z", description: "\"IF_C_NE_Z\"" },
        peg$c194 = "if_c_and_z",
        peg$c195 = { type: "literal", value: "IF_C_AND_Z", description: "\"IF_C_AND_Z\"" },
        peg$c196 = "if_c_and_nz",
        peg$c197 = { type: "literal", value: "IF_C_AND_NZ", description: "\"IF_C_AND_NZ\"" },
        peg$c198 = "if_nc_and_z",
        peg$c199 = { type: "literal", value: "IF_NC_AND_Z", description: "\"IF_NC_AND_Z\"" },
        peg$c200 = "if_nc_and_nz",
        peg$c201 = { type: "literal", value: "IF_NC_AND_NZ", description: "\"IF_NC_AND_NZ\"" },
        peg$c202 = "if_c_or_z",
        peg$c203 = { type: "literal", value: "IF_C_OR_Z", description: "\"IF_C_OR_Z\"" },
        peg$c204 = "if_c_or_nz",
        peg$c205 = { type: "literal", value: "IF_C_OR_NZ", description: "\"IF_C_OR_NZ\"" },
        peg$c206 = "if_nc_or_z",
        peg$c207 = { type: "literal", value: "IF_NC_OR_Z", description: "\"IF_NC_OR_Z\"" },
        peg$c208 = "if_nc_or_nz",
        peg$c209 = { type: "literal", value: "IF_NC_OR_NZ", description: "\"IF_NC_OR_NZ\"" },
        peg$c210 = "if_z_eq_c",
        peg$c211 = { type: "literal", value: "IF_Z_EQ_C", description: "\"IF_Z_EQ_C\"" },
        peg$c212 = "if_z_ne_c",
        peg$c213 = { type: "literal", value: "IF_Z_NE_C", description: "\"IF_Z_NE_C\"" },
        peg$c214 = "if_z_and_c",
        peg$c215 = { type: "literal", value: "IF_Z_AND_C", description: "\"IF_Z_AND_C\"" },
        peg$c216 = "if_z_and_nc",
        peg$c217 = { type: "literal", value: "IF_Z_AND_NC", description: "\"IF_Z_AND_NC\"" },
        peg$c218 = "if_nz_and_c",
        peg$c219 = { type: "literal", value: "IF_NZ_AND_C", description: "\"IF_NZ_AND_C\"" },
        peg$c220 = "if_nz_and_nc",
        peg$c221 = { type: "literal", value: "IF_NZ_AND_NC", description: "\"IF_NZ_AND_NC\"" },
        peg$c222 = "if_z_or_c",
        peg$c223 = { type: "literal", value: "IF_Z_OR_C", description: "\"IF_Z_OR_C\"" },
        peg$c224 = "if_z_or_nc",
        peg$c225 = { type: "literal", value: "IF_Z_OR_NC", description: "\"IF_Z_OR_NC\"" },
        peg$c226 = "if_nz_or_c",
        peg$c227 = { type: "literal", value: "IF_NZ_OR_C", description: "\"IF_NZ_OR_C\"" },
        peg$c228 = "if_nz_or_nc",
        peg$c229 = { type: "literal", value: "IF_NZ_OR_NC", description: "\"IF_NZ_OR_NC\"" },
        peg$c230 = "nop",
        peg$c231 = { type: "literal", value: "NOP", description: "\"NOP\"" },
        peg$c232 = "ret",
        peg$c233 = { type: "literal", value: "RET", description: "\"RET\"" },
        peg$c234 = "call",
        peg$c235 = { type: "literal", value: "CALL", description: "\"CALL\"" },
        peg$c236 = "jmp",
        peg$c237 = { type: "literal", value: "JMP", description: "\"JMP\"" },
        peg$c238 = "jmpret",
        peg$c239 = { type: "literal", value: "JMPRET", description: "\"JMPRET\"" },
        peg$c240 = "tjnz",
        peg$c241 = { type: "literal", value: "TJNZ", description: "\"TJNZ\"" },
        peg$c242 = "tjz",
        peg$c243 = { type: "literal", value: "TJZ", description: "\"TJZ\"" },
        peg$c244 = "djnz",
        peg$c245 = { type: "literal", value: "DJNZ", description: "\"DJNZ\"" },
        peg$c246 = "rdbyte",
        peg$c247 = { type: "literal", value: "RDBYTE", description: "\"RDBYTE\"" },
        peg$c248 = "rdword",
        peg$c249 = { type: "literal", value: "RDWORD", description: "\"RDWORD\"" },
        peg$c250 = "rdlong",
        peg$c251 = { type: "literal", value: "RDLONG", description: "\"RDLONG\"" },
        peg$c252 = "wrbyte",
        peg$c253 = { type: "literal", value: "WRBYTE", description: "\"WRBYTE\"" },
        peg$c254 = "wrword",
        peg$c255 = { type: "literal", value: "WRWORD", description: "\"WRWORD\"" },
        peg$c256 = "wrlong",
        peg$c257 = { type: "literal", value: "WRLONG", description: "\"WRLONG\"" },
        peg$c258 = "abs",
        peg$c259 = { type: "literal", value: "ABS", description: "\"ABS\"" },
        peg$c260 = "absneg",
        peg$c261 = { type: "literal", value: "ABSNEG", description: "\"ABSNEG\"" },
        peg$c262 = "neg",
        peg$c263 = { type: "literal", value: "NEG", description: "\"NEG\"" },
        peg$c264 = "negc",
        peg$c265 = { type: "literal", value: "NEGC", description: "\"NEGC\"" },
        peg$c266 = "negnc",
        peg$c267 = { type: "literal", value: "NEGNC", description: "\"NEGNC\"" },
        peg$c268 = "negz",
        peg$c269 = { type: "literal", value: "NEGZ", description: "\"NEGZ\"" },
        peg$c270 = "negnz",
        peg$c271 = { type: "literal", value: "NEGNZ", description: "\"NEGNZ\"" },
        peg$c272 = "min",
        peg$c273 = { type: "literal", value: "MIN", description: "\"MIN\"" },
        peg$c274 = "mins",
        peg$c275 = { type: "literal", value: "MINS", description: "\"MINS\"" },
        peg$c276 = "max",
        peg$c277 = { type: "literal", value: "MAX", description: "\"MAX\"" },
        peg$c278 = "maxs",
        peg$c279 = { type: "literal", value: "MAXS", description: "\"MAXS\"" },
        peg$c280 = "add",
        peg$c281 = { type: "literal", value: "ADD", description: "\"ADD\"" },
        peg$c282 = "addabs",
        peg$c283 = { type: "literal", value: "ADDABS", description: "\"ADDABS\"" },
        peg$c284 = "adds",
        peg$c285 = { type: "literal", value: "ADDS", description: "\"ADDS\"" },
        peg$c286 = "addx",
        peg$c287 = { type: "literal", value: "ADDX", description: "\"ADDX\"" },
        peg$c288 = "addsx",
        peg$c289 = { type: "literal", value: "ADDSX", description: "\"ADDSX\"" },
        peg$c290 = "sub",
        peg$c291 = { type: "literal", value: "SUB", description: "\"SUB\"" },
        peg$c292 = "subabs",
        peg$c293 = { type: "literal", value: "SUBABS", description: "\"SUBABS\"" },
        peg$c294 = "subs",
        peg$c295 = { type: "literal", value: "SUBS", description: "\"SUBS\"" },
        peg$c296 = "subx",
        peg$c297 = { type: "literal", value: "SUBX", description: "\"SUBX\"" },
        peg$c298 = "subsx",
        peg$c299 = { type: "literal", value: "SUBSX", description: "\"SUBSX\"" },
        peg$c300 = "sumc",
        peg$c301 = { type: "literal", value: "SUMC", description: "\"SUMC\"" },
        peg$c302 = "sumnc",
        peg$c303 = { type: "literal", value: "SUMNC", description: "\"SUMNC\"" },
        peg$c304 = "sumz",
        peg$c305 = { type: "literal", value: "SUMZ", description: "\"SUMZ\"" },
        peg$c306 = "sumnz",
        peg$c307 = { type: "literal", value: "SUMNZ", description: "\"SUMNZ\"" },
        peg$c308 = "mul",
        peg$c309 = { type: "literal", value: "MUL", description: "\"MUL\"" },
        peg$c310 = "muls",
        peg$c311 = { type: "literal", value: "MULS", description: "\"MULS\"" },
        peg$c312 = "andn",
        peg$c313 = { type: "literal", value: "ANDN", description: "\"ANDN\"" },
        peg$c314 = "xor",
        peg$c315 = { type: "literal", value: "XOR", description: "\"XOR\"" },
        peg$c316 = "ones",
        peg$c317 = { type: "literal", value: "ONES", description: "\"ONES\"" },
        peg$c318 = "enc",
        peg$c319 = { type: "literal", value: "ENC", description: "\"ENC\"" },
        peg$c320 = "rcl",
        peg$c321 = { type: "literal", value: "RCL", description: "\"RCL\"" },
        peg$c322 = "rcr",
        peg$c323 = { type: "literal", value: "RCR", description: "\"RCR\"" },
        peg$c324 = "rev",
        peg$c325 = { type: "literal", value: "REV", description: "\"REV\"" },
        peg$c326 = "rol",
        peg$c327 = { type: "literal", value: "ROL", description: "\"ROL\"" },
        peg$c328 = "ror",
        peg$c329 = { type: "literal", value: "ROR", description: "\"ROR\"" },
        peg$c330 = "shl",
        peg$c331 = { type: "literal", value: "SHL", description: "\"SHL\"" },
        peg$c332 = "shr",
        peg$c333 = { type: "literal", value: "SHR", description: "\"SHR\"" },
        peg$c334 = "sar",
        peg$c335 = { type: "literal", value: "SAR", description: "\"SAR\"" },
        peg$c336 = "cmp",
        peg$c337 = { type: "literal", value: "CMP", description: "\"CMP\"" },
        peg$c338 = "cmps",
        peg$c339 = { type: "literal", value: "CMPS", description: "\"CMPS\"" },
        peg$c340 = "cmpx",
        peg$c341 = { type: "literal", value: "CMPX", description: "\"CMPX\"" },
        peg$c342 = "cmpsx",
        peg$c343 = { type: "literal", value: "CMPSX", description: "\"CMPSX\"" },
        peg$c344 = "cmpsub",
        peg$c345 = { type: "literal", value: "CMPSUB", description: "\"CMPSUB\"" },
        peg$c346 = "test",
        peg$c347 = { type: "literal", value: "TEST", description: "\"TEST\"" },
        peg$c348 = "testn",
        peg$c349 = { type: "literal", value: "TESTN", description: "\"TESTN\"" },
        peg$c350 = "mov",
        peg$c351 = { type: "literal", value: "MOV", description: "\"MOV\"" },
        peg$c352 = "movs",
        peg$c353 = { type: "literal", value: "MOVS", description: "\"MOVS\"" },
        peg$c354 = "movd",
        peg$c355 = { type: "literal", value: "MOVD", description: "\"MOVD\"" },
        peg$c356 = "movi",
        peg$c357 = { type: "literal", value: "MOVI", description: "\"MOVI\"" },
        peg$c358 = "muxc",
        peg$c359 = { type: "literal", value: "MUXC", description: "\"MUXC\"" },
        peg$c360 = "muxnc",
        peg$c361 = { type: "literal", value: "MUXNC", description: "\"MUXNC\"" },
        peg$c362 = "muxz",
        peg$c363 = { type: "literal", value: "MUXZ", description: "\"MUXZ\"" },
        peg$c364 = "muxnz",
        peg$c365 = { type: "literal", value: "MUXNZ", description: "\"MUXNZ\"" },
        peg$c366 = "hubop",
        peg$c367 = { type: "literal", value: "HUBOP", description: "\"HUBOP\"" },
        peg$c368 = "clkset",
        peg$c369 = { type: "literal", value: "CLKSET", description: "\"CLKSET\"" },
        peg$c370 = "cogid",
        peg$c371 = { type: "literal", value: "COGID", description: "\"COGID\"" },
        peg$c372 = "coginit",
        peg$c373 = { type: "literal", value: "COGINIT", description: "\"COGINIT\"" },
        peg$c374 = "cogstop",
        peg$c375 = { type: "literal", value: "COGSTOP", description: "\"COGSTOP\"" },
        peg$c376 = "locknew",
        peg$c377 = { type: "literal", value: "LOCKNEW", description: "\"LOCKNEW\"" },
        peg$c378 = "lockret",
        peg$c379 = { type: "literal", value: "LOCKRET", description: "\"LOCKRET\"" },
        peg$c380 = "lockclr",
        peg$c381 = { type: "literal", value: "LOCKCLR", description: "\"LOCKCLR\"" },
        peg$c382 = "lockset",
        peg$c383 = { type: "literal", value: "LOCKSET", description: "\"LOCKSET\"" },
        peg$c384 = "waitcnt",
        peg$c385 = { type: "literal", value: "WAITCNT", description: "\"WAITCNT\"" },
        peg$c386 = "waitpeq",
        peg$c387 = { type: "literal", value: "WAITPEQ", description: "\"WAITPEQ\"" },
        peg$c388 = "waitpne",
        peg$c389 = { type: "literal", value: "WAITPNE", description: "\"WAITPNE\"" },
        peg$c390 = "waitvid",
        peg$c391 = { type: "literal", value: "WAITVID", description: "\"WAITVID\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parselines();

      return s0;
    }

    function peg$parselines() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseline();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseline();
      }

      return s0;
    }

    function peg$parseline() {
      var s0;

      s0 = peg$parsenonBlankLine();
      if (s0 === peg$FAILED) {
        s0 = peg$parseblankLine();
      }

      return s0;
    }

    function peg$parsenonBlankLine() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewhite();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewhite();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepasmStatement();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewhite();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewhite();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 10) {
              s4 = peg$c3;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c5(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c6) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsewhite();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsewhite();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 10) {
              s3 = peg$c3;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c8();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseblankLine() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewhite();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewhite();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s2 = peg$c3;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c9();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsewhite();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsewhite();
          }
        } else {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c9();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsewhite();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsewhite();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s2 = peg$c10;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$c12.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c13); }
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c12.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c13); }
                }
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 10) {
                  s4 = peg$c3;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c4); }
                }
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c14(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        }
      }

      return s0;
    }

    function peg$parsepasmStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parselabel();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhite();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecondition();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewhite();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseinstruction();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c15(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselabel();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsewhite();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseinstruction();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c16(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecondition();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsewhite();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseinstruction();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c17(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseinstruction();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c18(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$parseorg();
              if (s0 === peg$FAILED) {
                s0 = peg$parsefit();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parselabel();
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c19(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefit() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhite();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel11();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c22(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c23();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseorg() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c24) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhite();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel11();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c26(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c24) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c25); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c27();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parselabel() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c28.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c30.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c30.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s3 = peg$c32(s1, s2);
          if (s3) {
            s3 = peg$c1;
          } else {
            s3 = peg$c33;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c34(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseinstruction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseop0();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeffectList();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c35(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseop1();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsewhite();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsesrc();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseeffectList();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c36(s1, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseop2();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsewhite();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parselevel11();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsewhite();
                if (s4 === peg$FAILED) {
                  s4 = peg$c2;
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c37;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c38); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsewhite();
                    if (s6 === peg$FAILED) {
                      s6 = peg$c2;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsesrc();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseeffectList();
                        if (s8 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c39(s1, s3, s7, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        }
      }

      return s0;
    }

    function peg$parsesrc() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseliteral();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c40.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c40.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel11();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c42(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseliteral() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c43;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c45(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseeffectList() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseeffectEntry();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseeffectEntry();
      }

      return s0;
    }

    function peg$parseeffectEntry() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsewhite();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeffect();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c46(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsewhite() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c40.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c40.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c47();
      }
      s0 = s1;

      return s0;
    }

    function peg$parselevel11() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselevel10();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c48) {
          s2 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel11();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c50(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parselevel10();
      }

      return s0;
    }

    function peg$parselevel10() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselevel8();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c51) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel10();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c50(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parselevel8();
      }

      return s0;
    }

    function peg$parselevel8() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselevel7();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 60) {
          s2 = peg$c53;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s2 = peg$c55;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c56); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c57) {
              s2 = peg$c57;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c58); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c59) {
                s2 = peg$c59;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c60); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c61) {
                  s2 = peg$c61;
                  peg$currPos += 2;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c62); }
                }
                if (s2 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s2 = peg$c55;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c56); }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel8();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c50(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parselevel7();
      }

      return s0;
    }

    function peg$parselevel7() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselevel6();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c63) {
          s2 = peg$c63;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c65) {
            s2 = peg$c65;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel7();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c50(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parselevel6();
      }

      return s0;
    }

    function peg$parselevel6() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselevel5();
      if (s1 !== peg$FAILED) {
        if (peg$c67.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel6();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c50(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parselevel5();
      }

      return s0;
    }

    function peg$parselevel5() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselevel4();
      if (s1 !== peg$FAILED) {
        if (peg$c69.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel5();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c50(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parselevel4();
      }

      return s0;
    }

    function peg$parselevel4() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselevel3();
      if (s1 !== peg$FAILED) {
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel4();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c50(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parselevel3();
      }

      return s0;
    }

    function peg$parselevel3() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselevel2();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 38) {
          s2 = peg$c73;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel3();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c50(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parselevel2();
      }

      return s0;
    }

    function peg$parselevel2() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseprimary();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c75) {
          s2 = peg$c75;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c77) {
            s2 = peg$c77;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c79) {
              s2 = peg$c79;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c81) {
                s2 = peg$c81;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c83) {
                  s2 = peg$c83;
                  peg$currPos += 2;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c84); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c85) {
                    s2 = peg$c85;
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c86); }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselevel2();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c50(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseprimary();
      }

      return s0;
    }

    function peg$parseprimary() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c40.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c40.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c40.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c40.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c87(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c40.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c40.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesymbol();
          if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$c40.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c40.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c5(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          if (peg$c40.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c40.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s2 = peg$c88;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c89); }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$c40.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c40.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c41); }
                }
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s4 = peg$c90;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c40.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c41); }
                  }
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c40.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c41); }
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = peg$currPos;
                    s6 = peg$c92();
                    if (s6) {
                      s6 = peg$c33;
                    } else {
                      s6 = peg$c1;
                    }
                    if (s6 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            if (peg$c40.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c40.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
              }
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s2 = peg$c88;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c89); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parselevel11();
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s4 = peg$c90;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c91); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    if (peg$c40.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c41); }
                    }
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      if (peg$c40.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c41); }
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c93(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0;

      s0 = peg$parseQuaternaryNumber();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebinaryNumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parsehexNumber();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedecimalNumber();
          }
        }
      }

      return s0;
    }

    function peg$parsebinaryNumber() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 37) {
        s1 = peg$c94;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c96.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c97); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c96.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseQuaternaryNumber() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c99) {
        s1 = peg$c99;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c101.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c102); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c101.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c102); }
            }
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c103(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsedecimalNumber() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c104.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c104.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c106(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehexNumber() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c107;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c109.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c110); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c109.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c110); }
            }
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c111(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsesymbol() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c28.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c112.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c113); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c112.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c113); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s3 = peg$c114(s1, s2);
          if (s3) {
            s3 = peg$c1;
          } else {
            s3 = peg$c33;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c115(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsepredefined() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c116) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c118) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c119); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c120) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c122) {
              s0 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c123); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c124) {
                s0 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c125); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c126) {
                  s0 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c127); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c128) {
                    s0 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c129); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c130) {
                      s0 = input.substr(peg$currPos, 3);
                      peg$currPos += 3;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c131); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c132) {
                        s0 = input.substr(peg$currPos, 3);
                        peg$currPos += 3;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c133); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c134) {
                          s0 = input.substr(peg$currPos, 4);
                          peg$currPos += 4;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c135); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c136) {
                            s0 = input.substr(peg$currPos, 4);
                            peg$currPos += 4;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c137); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c138) {
                              s0 = input.substr(peg$currPos, 3);
                              peg$currPos += 3;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c139); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c140) {
                                s0 = input.substr(peg$currPos, 4);
                                peg$currPos += 4;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c141); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c142) {
                                  s0 = input.substr(peg$currPos, 4);
                                  peg$currPos += 4;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c143); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c144) {
                                    s0 = input.substr(peg$currPos, 4);
                                    peg$currPos += 4;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c145); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c146) {
                                      s0 = input.substr(peg$currPos, 4);
                                      peg$currPos += 4;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c147); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c148) {
                                        s0 = input.substr(peg$currPos, 4);
                                        peg$currPos += 4;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c149); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c150) {
                                          s0 = input.substr(peg$currPos, 4);
                                          peg$currPos += 4;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c151); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c152) {
                                            s0 = input.substr(peg$currPos, 4);
                                            peg$currPos += 4;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c153); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c154) {
                                              s0 = input.substr(peg$currPos, 4);
                                              peg$currPos += 4;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c155); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c156) {
                                                s0 = input.substr(peg$currPos, 3);
                                                peg$currPos += 3;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c157); }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseeffect() {
      var s0;

      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c158) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c160) {
          s0 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c161); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c162) {
            s0 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c163); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c164) {
              s0 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c165); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecondition() {
      var s0;

      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c166) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c167); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c168) {
          s0 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c169); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c170) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c171); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c172) {
              s0 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c173); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c174) {
                s0 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c175); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c176) {
                  s0 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c177); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c178) {
                    s0 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c180) {
                      s0 = input.substr(peg$currPos, 5);
                      peg$currPos += 5;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c181); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c182) {
                        s0 = input.substr(peg$currPos, 4);
                        peg$currPos += 4;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c183); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c184) {
                          s0 = input.substr(peg$currPos, 5);
                          peg$currPos += 5;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c185); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c186) {
                            s0 = input.substr(peg$currPos, 4);
                            peg$currPos += 4;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c187); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c188) {
                              s0 = input.substr(peg$currPos, 5);
                              peg$currPos += 5;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c189); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c190) {
                                s0 = input.substr(peg$currPos, 9);
                                peg$currPos += 9;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c191); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c192) {
                                  s0 = input.substr(peg$currPos, 9);
                                  peg$currPos += 9;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c193); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 10).toLowerCase() === peg$c194) {
                                    s0 = input.substr(peg$currPos, 10);
                                    peg$currPos += 10;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c195); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c196) {
                                      s0 = input.substr(peg$currPos, 11);
                                      peg$currPos += 11;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c197); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c198) {
                                        s0 = input.substr(peg$currPos, 11);
                                        peg$currPos += 11;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c199); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c200) {
                                          s0 = input.substr(peg$currPos, 12);
                                          peg$currPos += 12;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c201); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c202) {
                                            s0 = input.substr(peg$currPos, 9);
                                            peg$currPos += 9;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c203); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 10).toLowerCase() === peg$c204) {
                                              s0 = input.substr(peg$currPos, 10);
                                              peg$currPos += 10;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c205); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 10).toLowerCase() === peg$c206) {
                                                s0 = input.substr(peg$currPos, 10);
                                                peg$currPos += 10;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c207); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 11).toLowerCase() === peg$c208) {
                                                  s0 = input.substr(peg$currPos, 11);
                                                  peg$currPos += 11;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c209); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c210) {
                                                    s0 = input.substr(peg$currPos, 9);
                                                    peg$currPos += 9;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c211); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c212) {
                                                      s0 = input.substr(peg$currPos, 9);
                                                      peg$currPos += 9;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c213); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c214) {
                                                        s0 = input.substr(peg$currPos, 10);
                                                        peg$currPos += 10;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c215); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c216) {
                                                          s0 = input.substr(peg$currPos, 11);
                                                          peg$currPos += 11;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c217); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c218) {
                                                            s0 = input.substr(peg$currPos, 11);
                                                            peg$currPos += 11;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c219); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 12).toLowerCase() === peg$c220) {
                                                              s0 = input.substr(peg$currPos, 12);
                                                              peg$currPos += 12;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c221); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c222) {
                                                                s0 = input.substr(peg$currPos, 9);
                                                                peg$currPos += 9;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c223); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c224) {
                                                                  s0 = input.substr(peg$currPos, 10);
                                                                  peg$currPos += 10;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c225); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 10).toLowerCase() === peg$c226) {
                                                                    s0 = input.substr(peg$currPos, 10);
                                                                    peg$currPos += 10;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c227); }
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c228) {
                                                                      s0 = input.substr(peg$currPos, 11);
                                                                      peg$currPos += 11;
                                                                    } else {
                                                                      s0 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c229); }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseop0() {
      var s0;

      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c230) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c231); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c232) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c233); }
        }
      }

      return s0;
    }

    function peg$parseop1() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c234) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c235); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c236) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c237); }
        }
      }

      return s0;
    }

    function peg$parseop2() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c238) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c239); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c240) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c241); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c242) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c243); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c244) {
              s0 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c245); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c246) {
                s0 = input.substr(peg$currPos, 6);
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c247); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c248) {
                  s0 = input.substr(peg$currPos, 6);
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c249); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c250) {
                    s0 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c251); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c252) {
                      s0 = input.substr(peg$currPos, 6);
                      peg$currPos += 6;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c253); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c254) {
                        s0 = input.substr(peg$currPos, 6);
                        peg$currPos += 6;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c255); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c256) {
                          s0 = input.substr(peg$currPos, 6);
                          peg$currPos += 6;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c257); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c258) {
                            s0 = input.substr(peg$currPos, 3);
                            peg$currPos += 3;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c259); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c260) {
                              s0 = input.substr(peg$currPos, 6);
                              peg$currPos += 6;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c261); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c262) {
                                s0 = input.substr(peg$currPos, 3);
                                peg$currPos += 3;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c263); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c264) {
                                  s0 = input.substr(peg$currPos, 4);
                                  peg$currPos += 4;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c265); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c266) {
                                    s0 = input.substr(peg$currPos, 5);
                                    peg$currPos += 5;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c267); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c268) {
                                      s0 = input.substr(peg$currPos, 4);
                                      peg$currPos += 4;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c269); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c270) {
                                        s0 = input.substr(peg$currPos, 5);
                                        peg$currPos += 5;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c271); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c272) {
                                          s0 = input.substr(peg$currPos, 3);
                                          peg$currPos += 3;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c273); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c274) {
                                            s0 = input.substr(peg$currPos, 4);
                                            peg$currPos += 4;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c275); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c276) {
                                              s0 = input.substr(peg$currPos, 3);
                                              peg$currPos += 3;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c277); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c278) {
                                                s0 = input.substr(peg$currPos, 4);
                                                peg$currPos += 4;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c279); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c280) {
                                                  s0 = input.substr(peg$currPos, 3);
                                                  peg$currPos += 3;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c281); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c282) {
                                                    s0 = input.substr(peg$currPos, 6);
                                                    peg$currPos += 6;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c283); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c284) {
                                                      s0 = input.substr(peg$currPos, 4);
                                                      peg$currPos += 4;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c285); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c286) {
                                                        s0 = input.substr(peg$currPos, 4);
                                                        peg$currPos += 4;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c287); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c288) {
                                                          s0 = input.substr(peg$currPos, 5);
                                                          peg$currPos += 5;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c289); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c290) {
                                                            s0 = input.substr(peg$currPos, 3);
                                                            peg$currPos += 3;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c291); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c292) {
                                                              s0 = input.substr(peg$currPos, 6);
                                                              peg$currPos += 6;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c293); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c294) {
                                                                s0 = input.substr(peg$currPos, 4);
                                                                peg$currPos += 4;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c295); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c296) {
                                                                  s0 = input.substr(peg$currPos, 4);
                                                                  peg$currPos += 4;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c297); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c298) {
                                                                    s0 = input.substr(peg$currPos, 5);
                                                                    peg$currPos += 5;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c299); }
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c300) {
                                                                      s0 = input.substr(peg$currPos, 4);
                                                                      peg$currPos += 4;
                                                                    } else {
                                                                      s0 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c301); }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c302) {
                                                                        s0 = input.substr(peg$currPos, 5);
                                                                        peg$currPos += 5;
                                                                      } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c303); }
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c304) {
                                                                          s0 = input.substr(peg$currPos, 4);
                                                                          peg$currPos += 4;
                                                                        } else {
                                                                          s0 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c305); }
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c306) {
                                                                            s0 = input.substr(peg$currPos, 5);
                                                                            peg$currPos += 5;
                                                                          } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c307); }
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c308) {
                                                                              s0 = input.substr(peg$currPos, 3);
                                                                              peg$currPos += 3;
                                                                            } else {
                                                                              s0 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c309); }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c310) {
                                                                                s0 = input.substr(peg$currPos, 4);
                                                                                peg$currPos += 4;
                                                                              } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c311); }
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c51) {
                                                                                  s0 = input.substr(peg$currPos, 3);
                                                                                  peg$currPos += 3;
                                                                                } else {
                                                                                  s0 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c312) {
                                                                                    s0 = input.substr(peg$currPos, 4);
                                                                                    peg$currPos += 4;
                                                                                  } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c313); }
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c48) {
                                                                                      s0 = input.substr(peg$currPos, 2);
                                                                                      peg$currPos += 2;
                                                                                    } else {
                                                                                      s0 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c49); }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c314) {
                                                                                        s0 = input.substr(peg$currPos, 3);
                                                                                        peg$currPos += 3;
                                                                                      } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c315); }
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c316) {
                                                                                          s0 = input.substr(peg$currPos, 4);
                                                                                          peg$currPos += 4;
                                                                                        } else {
                                                                                          s0 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c317); }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c318) {
                                                                                            s0 = input.substr(peg$currPos, 3);
                                                                                            peg$currPos += 3;
                                                                                          } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c319); }
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c320) {
                                                                                              s0 = input.substr(peg$currPos, 3);
                                                                                              peg$currPos += 3;
                                                                                            } else {
                                                                                              s0 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c321); }
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c322) {
                                                                                                s0 = input.substr(peg$currPos, 3);
                                                                                                peg$currPos += 3;
                                                                                              } else {
                                                                                                s0 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c323); }
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c324) {
                                                                                                  s0 = input.substr(peg$currPos, 3);
                                                                                                  peg$currPos += 3;
                                                                                                } else {
                                                                                                  s0 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c325); }
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c326) {
                                                                                                    s0 = input.substr(peg$currPos, 3);
                                                                                                    peg$currPos += 3;
                                                                                                  } else {
                                                                                                    s0 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c327); }
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c328) {
                                                                                                      s0 = input.substr(peg$currPos, 3);
                                                                                                      peg$currPos += 3;
                                                                                                    } else {
                                                                                                      s0 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c329); }
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c330) {
                                                                                                        s0 = input.substr(peg$currPos, 3);
                                                                                                        peg$currPos += 3;
                                                                                                      } else {
                                                                                                        s0 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c331); }
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c332) {
                                                                                                          s0 = input.substr(peg$currPos, 3);
                                                                                                          peg$currPos += 3;
                                                                                                        } else {
                                                                                                          s0 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c333); }
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c334) {
                                                                                                            s0 = input.substr(peg$currPos, 3);
                                                                                                            peg$currPos += 3;
                                                                                                          } else {
                                                                                                            s0 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c335); }
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c336) {
                                                                                                              s0 = input.substr(peg$currPos, 3);
                                                                                                              peg$currPos += 3;
                                                                                                            } else {
                                                                                                              s0 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c337); }
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c338) {
                                                                                                                s0 = input.substr(peg$currPos, 4);
                                                                                                                peg$currPos += 4;
                                                                                                              } else {
                                                                                                                s0 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c339); }
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c340) {
                                                                                                                  s0 = input.substr(peg$currPos, 4);
                                                                                                                  peg$currPos += 4;
                                                                                                                } else {
                                                                                                                  s0 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c341); }
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c342) {
                                                                                                                    s0 = input.substr(peg$currPos, 5);
                                                                                                                    peg$currPos += 5;
                                                                                                                  } else {
                                                                                                                    s0 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c343); }
                                                                                                                  }
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c344) {
                                                                                                                      s0 = input.substr(peg$currPos, 6);
                                                                                                                      peg$currPos += 6;
                                                                                                                    } else {
                                                                                                                      s0 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c345); }
                                                                                                                    }
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c346) {
                                                                                                                        s0 = input.substr(peg$currPos, 4);
                                                                                                                        peg$currPos += 4;
                                                                                                                      } else {
                                                                                                                        s0 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c347); }
                                                                                                                      }
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c348) {
                                                                                                                          s0 = input.substr(peg$currPos, 5);
                                                                                                                          peg$currPos += 5;
                                                                                                                        } else {
                                                                                                                          s0 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c349); }
                                                                                                                        }
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c350) {
                                                                                                                            s0 = input.substr(peg$currPos, 3);
                                                                                                                            peg$currPos += 3;
                                                                                                                          } else {
                                                                                                                            s0 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c351); }
                                                                                                                          }
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c352) {
                                                                                                                              s0 = input.substr(peg$currPos, 4);
                                                                                                                              peg$currPos += 4;
                                                                                                                            } else {
                                                                                                                              s0 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c353); }
                                                                                                                            }
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c354) {
                                                                                                                                s0 = input.substr(peg$currPos, 4);
                                                                                                                                peg$currPos += 4;
                                                                                                                              } else {
                                                                                                                                s0 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c355); }
                                                                                                                              }
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c356) {
                                                                                                                                  s0 = input.substr(peg$currPos, 4);
                                                                                                                                  peg$currPos += 4;
                                                                                                                                } else {
                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c357); }
                                                                                                                                }
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c358) {
                                                                                                                                    s0 = input.substr(peg$currPos, 4);
                                                                                                                                    peg$currPos += 4;
                                                                                                                                  } else {
                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c359); }
                                                                                                                                  }
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c360) {
                                                                                                                                      s0 = input.substr(peg$currPos, 5);
                                                                                                                                      peg$currPos += 5;
                                                                                                                                    } else {
                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c361); }
                                                                                                                                    }
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c362) {
                                                                                                                                        s0 = input.substr(peg$currPos, 4);
                                                                                                                                        peg$currPos += 4;
                                                                                                                                      } else {
                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c363); }
                                                                                                                                      }
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c364) {
                                                                                                                                          s0 = input.substr(peg$currPos, 5);
                                                                                                                                          peg$currPos += 5;
                                                                                                                                        } else {
                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c365); }
                                                                                                                                        }
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c366) {
                                                                                                                                            s0 = input.substr(peg$currPos, 5);
                                                                                                                                            peg$currPos += 5;
                                                                                                                                          } else {
                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c367); }
                                                                                                                                          }
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c368) {
                                                                                                                                              s0 = input.substr(peg$currPos, 6);
                                                                                                                                              peg$currPos += 6;
                                                                                                                                            } else {
                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c369); }
                                                                                                                                            }
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c370) {
                                                                                                                                                s0 = input.substr(peg$currPos, 5);
                                                                                                                                                peg$currPos += 5;
                                                                                                                                              } else {
                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c371); }
                                                                                                                                              }
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c372) {
                                                                                                                                                  s0 = input.substr(peg$currPos, 7);
                                                                                                                                                  peg$currPos += 7;
                                                                                                                                                } else {
                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c373); }
                                                                                                                                                }
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c374) {
                                                                                                                                                    s0 = input.substr(peg$currPos, 7);
                                                                                                                                                    peg$currPos += 7;
                                                                                                                                                  } else {
                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c375); }
                                                                                                                                                  }
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c376) {
                                                                                                                                                      s0 = input.substr(peg$currPos, 7);
                                                                                                                                                      peg$currPos += 7;
                                                                                                                                                    } else {
                                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c377); }
                                                                                                                                                    }
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c378) {
                                                                                                                                                        s0 = input.substr(peg$currPos, 7);
                                                                                                                                                        peg$currPos += 7;
                                                                                                                                                      } else {
                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c379); }
                                                                                                                                                      }
                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c380) {
                                                                                                                                                          s0 = input.substr(peg$currPos, 7);
                                                                                                                                                          peg$currPos += 7;
                                                                                                                                                        } else {
                                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c381); }
                                                                                                                                                        }
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c382) {
                                                                                                                                                            s0 = input.substr(peg$currPos, 7);
                                                                                                                                                            peg$currPos += 7;
                                                                                                                                                          } else {
                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c383); }
                                                                                                                                                          }
                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c384) {
                                                                                                                                                              s0 = input.substr(peg$currPos, 7);
                                                                                                                                                              peg$currPos += 7;
                                                                                                                                                            } else {
                                                                                                                                                              s0 = peg$FAILED;
                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c385); }
                                                                                                                                                            }
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c386) {
                                                                                                                                                                s0 = input.substr(peg$currPos, 7);
                                                                                                                                                                peg$currPos += 7;
                                                                                                                                                              } else {
                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c387); }
                                                                                                                                                              }
                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c388) {
                                                                                                                                                                  s0 = input.substr(peg$currPos, 7);
                                                                                                                                                                  peg$currPos += 7;
                                                                                                                                                                } else {
                                                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c389); }
                                                                                                                                                                }
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c390) {
                                                                                                                                                                    s0 = input.substr(peg$currPos, 7);
                                                                                                                                                                    peg$currPos += 7;
                                                                                                                                                                  } else {
                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c391); }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }


      function isKeyword (s) {return false}


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
